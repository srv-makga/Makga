/*
https://plantuml.com/ko/class-diagram
유형	기호	목적
확장	<|--	계층 구조에서 클래스의 특수화
구현	<|..	클래스에 의한 인터페이스의 실현
컴포지션	*--	부분이 전체 없이는 존재할 수 없음
집합	o--	부분이 전체와 독립적으로 존재할 수 있음
의존성	-->	객체가 다른 객체를 사용함
약한 의존성	..>	더 약한 형태의 의존성
*/

@startuml

package "Core" {
/'IOCP, RIO / Server, Client 공통 기능 인터페이스'/
interface Service {
    {abstract}+bool Initialize()
    {abstract}+void Finalize()
    +bool Start()
    {abstract}+void Stop()
    {abstract}#bool StartUp()
    {abstract}#bool StartupEnd()
}
interface Acceptor {
    {abstract}#size_t GetConnectCount() const
    {abstract}#size_t GetMaxConnectCount() const
}
interface Connector {}
}

package "Common" {
interface NetHandler {
    {abstract}+bool Initialize()
    {abstract}+void Finalize()
    {abstract}+bool CreateThread(function<void()> _work, size_t _thread_count = 1)
    {abstract}+bool Start()
    {abstract}+void Stop()
}
class NetThread {
    #atomic<bool> m_is_running
    #function<void()> m_work
    #vector<thread> m_threads

    +bool Initialize()
    +void Finalize()
    +bool CreateThread(function<void()> _work, size_t _thread_count = 1)
    +bool Start()
    +void Stop()
}
interface JobHandler {
    {abstract}+bool Initialize()
	{abstract}+void Finalize()
	{abstract}+bool CreateThread(size_t _thread_count = 1)
	{abstract}+void Push(shared_ptr<Job> _job)
	{abstract}#shared_ptr<Job> Pop()
}
class JobThread {
    #priority_queue<shared_ptr<Job>> m_job_queue
    #vector<thread> m_threads

    +bool Initialize()
	+void Finalize()
	+bool CreateThread(size_t _thread_count = 1)
	+void Push(shared_ptr<Job> _job)
	#shared_ptr<Job> Pop()
}
}

Common.NetHandler <|-- Common.NetThread
Common.JobHandler <|-- Common.JobThread

package "Iocp" {
class Core {
    -HANDLE m_iocp_handle

    Core()
    +bool Initialize()
    +void Finalize()
    +bool Registered(HANDLE, ULONG_PTR)
    +bool PostStatus(ULONG_PTR, DWORD, OVERLAPP)
    +bool GetStatus(ULONG_PTR*, OUT DWORD&, OUT OVERLAPPED**, DWORD, OUT int&)
    +HANDLE GetHandle() const
    -bool CreateHandle()
    -void CloseHandle()
    }
/'서버, 클라 공통 기능'/
class Service {
    #ServiceType m_service_type
    #shared_ptr<Core> m_core
    #shared_ptr<NetHandler> m_net_handler
    #shared_ptr<JobHandler> m_job_handler
    #atomic<bool> m_is_running

    +Service(ServiceType, shared_ptr<Core>)
    /'Service override'/
    +bool Initialize()
    +void Finalize()
    +void InitHandler(shared_ptr<NetHandler>, shared_ptr<JobHandler>)
    {abstract}#bool Run(function<void()>)

    +ServieType GetServiceType() const
    +shared_ptr<Core> GetCore() const
    +bool IsRunning() const
}
/'처리 기능이 있는 IOCP 객체 인터페이스'/
class Object {
    {abstract}+void Dispatch(Event*, int)
    {abstract}+HANDLE GetHandle() const
}
/'Accept, Connect, Read, Write 등의 IOCP 이벤트'/
class Event {
    +IoType m_io_type
    +shared_ptr<Object> m_owner

    +Event(IoType)
    +bool Initialize()
    +void Finalize()
}
class Server {
    #shared_ptr<EndPoint> m_ep
    #shared_ptr<Acceptor> m_acceptor
    #map<SessionId, shared_ptr<Session>> m_sessions
    #mutex m_mutex_session
    #queue<shared_ptr<Session>> m_free_sessions
    #mutex m_mutex_free_session

    +Server(ServiceType, shared_ptr<Core>, shared_ptr<EndPoint>)
    /'Service override'/
    +bool Initialize()
    +void Finalize()
    +void Wait()
    +void Stop()
    #bool StartUp()
    #bool StartupEnd()
    #bool Run(function<void()>)

    +shared_ptr<EndPoint> GetEndPoint() const
    +shared_ptr<Session> PopFreeSession()
    +void PutFreeSession(shared_ptr<Session>)
    +shared_ptr<Session> PopSession(SessionId_t)
    +void PutSession(shared_ptr<Session>)
    +void InitFreeSessions(queue<shared_ptr<Session>>)
    +bool ForeachSession(function<void(shared_ptr<Session>)>) const
    +bool Send(SessionId_t, shared_ptr<NetBuffer>)
    +bool Broadcast(shared_ptr<NetBuffer>)
    +void DisconnectAll()
}
class Client {
    #shared_ptr<EndPoint> m_ep
    #shared_ptr<Connector> m_connector
    #shared_ptr<Session> m_session

    +Client(ServiceType, shared_ptr<Core>, shared_ptr<EndPoint>)
    /'Service override'/
    +bool Initialize()
    +void Finalize()
    +void Wait()
    +void Stop()
    #bool StartUp()
    #bool StartupEnd()
    #bool Run(function<void()>)

    +shared_ptr<EndPoint> GetEndPoint() const
    +shared_ptr<Session> GetSession() const
    +void SetSession(shared_ptr<Session>)
    +bool Send(shared_ptr<NetBuffer>)
    +void DisconnectAll()
}
class Session {
    #SessionId_t m_session_id
    #ServiceType m_service_type
    #SOCKET m_socket
    #EndPoint m_ep
    #atomic<bool> m_is_connected
    #atomic<bool> m_is_zero_recv
    #time_t m_last_recv_time
    #time_t m_last_send_time
    #shared_ptr<NetBuffer> m_recv_buffer

    +Session(ServiceType, size_t _buffer_size)
    +bool Initialize()
    +void Finalize()
    +void SetService(shared_ptr<Service>)
    +shared_ptr<Service> GetService() const
    +void SetSessionId(SessionId_t)
    +SessionId_t GetSessionId() const
    +void SetEndpoint(shared_ptr<EndPoint>)
    +shared_ptr<EndPoint> GetEndpoint() const
    +bool Connect()
    +void Disconnect()
    +bool IsConnected() const
    +void SetSocket(SOCKET)
    +void Send(shared_ptr<NetBuffer>)
    +int Recv()

    +bool RegisterConnect()
    +bool RegisterDisconnect()
    +bool RegisterZeroRecv()
    +bool RegisterRecv()
    +bool RegisterSend()
    +void OnConnect()
    +void OnDisconnect()
    +void OnRecv(int)
    +void OnSend(int)

    /'Object override'/
    +void Dispatch(Event*, int)
    +HANDLE GetHandle() const
}
class Acceptor {
    #shared_ptr<Service> m_server
    #SOCKET m_listen_socket
    #set<Event*> m_accept_events
    #queue<Event*> m_free_accept_events
    #mutex m_mutex_accept_events

    Acceptor(shared_ptr<Service>)
    +bool Initialize()
    +void Finalize()
    +bool Start()
    +void Stop()
    #void CloseSocket()
    +bool RegisterAccept(Event*)
    +void ProcessAccept(Event*)
    +bool CanAccept() const
    /'Object override'/
    +void Dispatch(Event*, int)
    +HANDLE GetHandle() const
    /'Acceptor override'/
    +size_t GetMaxSessionCount() const
    +size_t GetCurrentSessionCount() const
}
class Connector {
    #shared_ptr<Service> m_client
    #shared_ptr<Session> m_session
    #Event* m_connect_event

    Connector(shared_ptr<Service>)
    +bool Initialize()
    +void Finalize()
    +bool Start()
    +void Stop()
    #void CloseSocket()
    +bool RegisterConnect(Event*)
    +void ProcessConnect(Event*)
    /'Object override'/
    +void Dispatch(Event*, int)
    +HANDLE GetHandle() const
}
}

package "Rio" {
class Core {
    #RIO_CQ m_cq
    #RIORESULT m_results
    #set<shared_ptr<Session>> m_sessions
    #mutex m_mutex_sessions

    +Core()
    +bool Initialize()
    +void Finalize()
    +bool Dispatch()
    +void DeferredSend()
    +void AddSession(shared_ptr<Session>)
    +void RemoveSession(shared_ptr<Session>)

    +RIO_CQ& GetCompletionQueue()
}
class Service {}
class Event {
    +shared_ptr<Session> owner
    +IOType io_type
    +Event(IOType)
}
class Object {}
class Server {
    #vector<shared_ptr<Core>> m_cores
    #
    +Server(RIOSessionFactory, EndPoint)
}
class Client {}
class Buffer {
    #size_t m_send_pos
    +Buffer(size_t)
    +bool Initialize()
    +void Finalize()
    +size_t GetChunkSendSize() const
    +size_t GetSendDataSize() const
    +size_t GetSendOffset() const
    +bool OnSendBuffer(size_t)
    -void AllocateBuffer()
}
class Session {
    #SOCKET m_socket
    #EndPoint m_ep
    #atomic<bool> m_is_connected
    #shared_ptr<Core> m_core
    #RIO_RQ m_rq
    #Event m_recv_event
    #vector<Event> m_send_events
    #mutex m_mutex_send_events
    #time_t m_last_recv_time
    #time_t m_last_send_time
    #RIO_BUFFER_ID m_recv_buffer_id
    #shared_ptr<Buffer> m_recv_buffer
    #RIO_BUFFER_ID m_send_buffer_id
    #shared_ptr<Buffer> m_send_buffer

    +Session(shared_ptr<Core>)
    +bool Initialize()
    +void Finalize()
    +void Disconnect()
    +void Send(shared_ptr<NetBuffer>)
    +void Dispatch(Event*, int)
    +bool SendDeferred() 'SendBufferQueue에서 뽑아와서 SendBuffer에 데이터 복사, RioSendEvent 만들어서 RIOSend 호출
    +void SendCommit() 'RioSendEvent를 nullptr로 RIOSend 함수 호출.
    +void RegisterRecv()
    +bool RegisterSend(size_t, Offset)
    +void ProcessConnect()
    +void ProcessRecv(size_t)
    +void ProcessSend(size_t)
    +{abstract}void OnConnect()
    +{abstract}void OnDisconnect()
    +{abstract}void OnRecv(char*, size_t)
    +{abstract}void OnSend(size_t)
    +{abstract}void ProcPacket(shared_ptr<Packet>)
    +bool IsConnected() const
    +SOCKET GetSocket() const
    +EndPoint& GetEndpoint() const
    +void SetEndpoint(EndPoint)
}
class Acceptor {
    #SOCKET m_listen_socket
    #EndPoint m_ep
}
class Connector {}
}

Core.Service <|.. Iocp.Service
Core.Acceptor <|.. Iocp.Acceptor
Core.Connector <|.. Iocp.Connector

Core.Service <|.. Rio.Service
Core.Acceptor <|.. Rio.Acceptor
Core.Connector <|.. Rio.Connector

Iocp.Service <|-- Iocp.Server
Iocp.Service <|-- Iocp.Client
Iocp.Object <|-- Iocp.Acceptor
Iocp.Object <|-- Iocp.Connector
Iocp.Object <|-- Iocp.Session

Iocp.Service o-- Iocp.Core
Iocp.Server *-- Iocp.Acceptor

Iocp.Server o-- Iocp.Session
Iocp.Client *-- Iocp.Connector
Iocp.Client *-- Iocp.Session

Rio.Service <|-- Rio.Server
Rio.Service <|-- Rio.Client
Rio.Server *-- Rio.Core
Rio.Server *-- Rio.Acceptor
Rio.Server o-- Rio.Session
Rio.Client *-- Rio.Connector
Rio.Client *-- Rio.Session
RIO_BUF <|-- Rio.Event
RingBuffer <|-- Rio.Buffer

@enduml