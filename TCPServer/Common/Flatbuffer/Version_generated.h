// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VERSION_NET_H_
#define FLATBUFFERS_GENERATED_VERSION_NET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace Net {

enum ProtocolVersion : int32_t {
  ProtocolVersion_PROTOCOL_VER = 1,
  ProtocolVersion_MIN = ProtocolVersion_PROTOCOL_VER,
  ProtocolVersion_MAX = ProtocolVersion_PROTOCOL_VER
};

inline const ProtocolVersion (&EnumValuesProtocolVersion())[1] {
  static const ProtocolVersion values[] = {
    ProtocolVersion_PROTOCOL_VER
  };
  return values;
}

inline const char * const *EnumNamesProtocolVersion() {
  static const char * const names[2] = {
    "PROTOCOL_VER",
    nullptr
  };
  return names;
}

inline const char *EnumNameProtocolVersion(ProtocolVersion e) {
  if (::flatbuffers::IsOutRange(e, ProtocolVersion_PROTOCOL_VER, ProtocolVersion_PROTOCOL_VER)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(ProtocolVersion_PROTOCOL_VER);
  return EnumNamesProtocolVersion()[index];
}

enum BuildVersion : int32_t {
  BuildVersion_BUILD_VER = 1,
  BuildVersion_MIN = BuildVersion_BUILD_VER,
  BuildVersion_MAX = BuildVersion_BUILD_VER
};

inline const BuildVersion (&EnumValuesBuildVersion())[1] {
  static const BuildVersion values[] = {
    BuildVersion_BUILD_VER
  };
  return values;
}

inline const char * const *EnumNamesBuildVersion() {
  static const char * const names[2] = {
    "BUILD_VER",
    nullptr
  };
  return names;
}

inline const char *EnumNameBuildVersion(BuildVersion e) {
  if (::flatbuffers::IsOutRange(e, BuildVersion_BUILD_VER, BuildVersion_BUILD_VER)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(BuildVersion_BUILD_VER);
  return EnumNamesBuildVersion()[index];
}

}  // namespace Net

#endif  // FLATBUFFERS_GENERATED_VERSION_NET_H_
