// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMONTABLE_FB_H_
#define FLATBUFFERS_GENERATED_COMMONTABLE_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace fb {

struct ServerInfo;
struct ServerInfoBuilder;
struct ServerInfoT;

struct Vector3;
struct Vector3Builder;
struct Vector3T;

struct Position;
struct PositionBuilder;
struct PositionT;

struct HpMp;
struct HpMpBuilder;
struct HpMpT;

struct BuffInfo;
struct BuffInfoBuilder;
struct BuffInfoT;

struct ActorInfoBase;
struct ActorInfoBaseBuilder;
struct ActorInfoBaseT;

struct ActorInfoDetail;
struct ActorInfoDetailBuilder;
struct ActorInfoDetailT;

struct ItemAbility;
struct ItemAbilityBuilder;
struct ItemAbilityT;

struct ItemBase;
struct ItemBaseBuilder;
struct ItemBaseT;

struct ItemDetail;
struct ItemDetailBuilder;
struct ItemDetailT;

struct PartyCreateOption;
struct PartyCreateOptionBuilder;
struct PartyCreateOptionT;

struct GuildCreateOption;
struct GuildCreateOptionBuilder;
struct GuildCreateOptionT;

struct ServerInfoT : public ::flatbuffers::NativeTable {
  typedef ServerInfo TableType;
  int32_t server_id = 0;
  std::string ip{};
  std::vector<uint16_t> port{};
};

struct ServerInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerInfoT NativeTableType;
  typedef ServerInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVER_ID = 4,
    VT_IP = 6,
    VT_PORT = 8
  };
  int32_t server_id() const {
    return GetField<int32_t>(VT_SERVER_ID, 0);
  }
  bool mutate_server_id(int32_t _server_id = 0) {
    return SetField<int32_t>(VT_SERVER_ID, _server_id, 0);
  }
  const ::flatbuffers::String *ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IP);
  }
  ::flatbuffers::String *mutable_ip() {
    return GetPointer<::flatbuffers::String *>(VT_IP);
  }
  const ::flatbuffers::Vector<uint16_t> *port() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_PORT);
  }
  ::flatbuffers::Vector<uint16_t> *mutable_port() {
    return GetPointer<::flatbuffers::Vector<uint16_t> *>(VT_PORT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SERVER_ID, 4) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyOffset(verifier, VT_PORT) &&
           verifier.VerifyVector(port()) &&
           verifier.EndTable();
  }
  ServerInfoT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ServerInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ServerInfo> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ServerInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ServerInfoBuilder {
  typedef ServerInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_server_id(int32_t server_id) {
    fbb_.AddElement<int32_t>(ServerInfo::VT_SERVER_ID, server_id, 0);
  }
  void add_ip(::flatbuffers::Offset<::flatbuffers::String> ip) {
    fbb_.AddOffset(ServerInfo::VT_IP, ip);
  }
  void add_port(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> port) {
    fbb_.AddOffset(ServerInfo::VT_PORT, port);
  }
  explicit ServerInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerInfo> CreateServerInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t server_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ip = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> port = 0) {
  ServerInfoBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_ip(ip);
  builder_.add_server_id(server_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ServerInfo> CreateServerInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t server_id = 0,
    const char *ip = nullptr,
    const std::vector<uint16_t> *port = nullptr) {
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  auto port__ = port ? _fbb.CreateVector<uint16_t>(*port) : 0;
  return fb::CreateServerInfo(
      _fbb,
      server_id,
      ip__,
      port__);
}

::flatbuffers::Offset<ServerInfo> CreateServerInfo(::flatbuffers::FlatBufferBuilder &_fbb, const ServerInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Vector3T : public ::flatbuffers::NativeTable {
  typedef Vector3 TableType;
  float x = 0.0f;
  float y = 0.0f;
  float z = 0.0f;
};

struct Vector3 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vector3T NativeTableType;
  typedef Vector3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  bool mutate_x(float _x = 0.0f) {
    return SetField<float>(VT_X, _x, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool mutate_y(float _y = 0.0f) {
    return SetField<float>(VT_Y, _y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool mutate_z(float _z = 0.0f) {
    return SetField<float>(VT_Z, _z, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
  Vector3T *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Vector3T *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Vector3> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Vector3T* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Vector3Builder {
  typedef Vector3 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vector3::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vector3::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Vector3::VT_Z, z, 0.0f);
  }
  explicit Vector3Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vector3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vector3>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vector3> CreateVector3(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  Vector3Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

::flatbuffers::Offset<Vector3> CreateVector3(::flatbuffers::FlatBufferBuilder &_fbb, const Vector3T *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PositionT : public ::flatbuffers::NativeTable {
  typedef Position TableType;
  float x = 0.0f;
  float y = 0.0f;
  float z = 0.0f;
  float angle = 0.0f;
};

struct Position FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PositionT NativeTableType;
  typedef PositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_ANGLE = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  bool mutate_x(float _x = 0.0f) {
    return SetField<float>(VT_X, _x, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool mutate_y(float _y = 0.0f) {
    return SetField<float>(VT_Y, _y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool mutate_z(float _z = 0.0f) {
    return SetField<float>(VT_Z, _z, 0.0f);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  bool mutate_angle(float _angle = 0.0f) {
    return SetField<float>(VT_ANGLE, _angle, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           VerifyField<float>(verifier, VT_ANGLE, 4) &&
           verifier.EndTable();
  }
  PositionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PositionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Position> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PositionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PositionBuilder {
  typedef Position Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Position::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Position::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Position::VT_Z, z, 0.0f);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(Position::VT_ANGLE, angle, 0.0f);
  }
  explicit PositionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Position> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Position>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Position> CreatePosition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    float angle = 0.0f) {
  PositionBuilder builder_(_fbb);
  builder_.add_angle(angle);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

::flatbuffers::Offset<Position> CreatePosition(::flatbuffers::FlatBufferBuilder &_fbb, const PositionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct HpMpT : public ::flatbuffers::NativeTable {
  typedef HpMp TableType;
  int64_t cur_hp = 0;
  int64_t max_hp = 0;
  int64_t cur_mp = 0;
  int64_t max_mp = 0;
};

struct HpMp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HpMpT NativeTableType;
  typedef HpMpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CUR_HP = 4,
    VT_MAX_HP = 6,
    VT_CUR_MP = 8,
    VT_MAX_MP = 10
  };
  int64_t cur_hp() const {
    return GetField<int64_t>(VT_CUR_HP, 0);
  }
  bool mutate_cur_hp(int64_t _cur_hp = 0) {
    return SetField<int64_t>(VT_CUR_HP, _cur_hp, 0);
  }
  int64_t max_hp() const {
    return GetField<int64_t>(VT_MAX_HP, 0);
  }
  bool mutate_max_hp(int64_t _max_hp = 0) {
    return SetField<int64_t>(VT_MAX_HP, _max_hp, 0);
  }
  int64_t cur_mp() const {
    return GetField<int64_t>(VT_CUR_MP, 0);
  }
  bool mutate_cur_mp(int64_t _cur_mp = 0) {
    return SetField<int64_t>(VT_CUR_MP, _cur_mp, 0);
  }
  int64_t max_mp() const {
    return GetField<int64_t>(VT_MAX_MP, 0);
  }
  bool mutate_max_mp(int64_t _max_mp = 0) {
    return SetField<int64_t>(VT_MAX_MP, _max_mp, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_CUR_HP, 8) &&
           VerifyField<int64_t>(verifier, VT_MAX_HP, 8) &&
           VerifyField<int64_t>(verifier, VT_CUR_MP, 8) &&
           VerifyField<int64_t>(verifier, VT_MAX_MP, 8) &&
           verifier.EndTable();
  }
  HpMpT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HpMpT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<HpMp> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HpMpT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HpMpBuilder {
  typedef HpMp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cur_hp(int64_t cur_hp) {
    fbb_.AddElement<int64_t>(HpMp::VT_CUR_HP, cur_hp, 0);
  }
  void add_max_hp(int64_t max_hp) {
    fbb_.AddElement<int64_t>(HpMp::VT_MAX_HP, max_hp, 0);
  }
  void add_cur_mp(int64_t cur_mp) {
    fbb_.AddElement<int64_t>(HpMp::VT_CUR_MP, cur_mp, 0);
  }
  void add_max_mp(int64_t max_mp) {
    fbb_.AddElement<int64_t>(HpMp::VT_MAX_MP, max_mp, 0);
  }
  explicit HpMpBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HpMp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HpMp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HpMp> CreateHpMp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t cur_hp = 0,
    int64_t max_hp = 0,
    int64_t cur_mp = 0,
    int64_t max_mp = 0) {
  HpMpBuilder builder_(_fbb);
  builder_.add_max_mp(max_mp);
  builder_.add_cur_mp(cur_mp);
  builder_.add_max_hp(max_hp);
  builder_.add_cur_hp(cur_hp);
  return builder_.Finish();
}

::flatbuffers::Offset<HpMp> CreateHpMp(::flatbuffers::FlatBufferBuilder &_fbb, const HpMpT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct BuffInfoT : public ::flatbuffers::NativeTable {
  typedef BuffInfo TableType;
  uint32_t idx = 0;
  int64_t expire = 0;
};

struct BuffInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuffInfoT NativeTableType;
  typedef BuffInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDX = 4,
    VT_EXPIRE = 6
  };
  uint32_t idx() const {
    return GetField<uint32_t>(VT_IDX, 0);
  }
  bool mutate_idx(uint32_t _idx = 0) {
    return SetField<uint32_t>(VT_IDX, _idx, 0);
  }
  int64_t expire() const {
    return GetField<int64_t>(VT_EXPIRE, 0);
  }
  bool mutate_expire(int64_t _expire = 0) {
    return SetField<int64_t>(VT_EXPIRE, _expire, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_IDX, 4) &&
           VerifyField<int64_t>(verifier, VT_EXPIRE, 8) &&
           verifier.EndTable();
  }
  BuffInfoT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BuffInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<BuffInfo> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BuffInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BuffInfoBuilder {
  typedef BuffInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idx(uint32_t idx) {
    fbb_.AddElement<uint32_t>(BuffInfo::VT_IDX, idx, 0);
  }
  void add_expire(int64_t expire) {
    fbb_.AddElement<int64_t>(BuffInfo::VT_EXPIRE, expire, 0);
  }
  explicit BuffInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BuffInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BuffInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BuffInfo> CreateBuffInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t idx = 0,
    int64_t expire = 0) {
  BuffInfoBuilder builder_(_fbb);
  builder_.add_expire(expire);
  builder_.add_idx(idx);
  return builder_.Finish();
}

::flatbuffers::Offset<BuffInfo> CreateBuffInfo(::flatbuffers::FlatBufferBuilder &_fbb, const BuffInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ActorInfoBaseT : public ::flatbuffers::NativeTable {
  typedef ActorInfoBase TableType;
  uint32_t idx = 0;
  std::string name{};
  std::unique_ptr<fb::PositionT> pos{};
  std::unique_ptr<fb::HpMpT> hpmp{};
  ActorInfoBaseT() = default;
  ActorInfoBaseT(const ActorInfoBaseT &o);
  ActorInfoBaseT(ActorInfoBaseT&&) FLATBUFFERS_NOEXCEPT = default;
  ActorInfoBaseT &operator=(ActorInfoBaseT o) FLATBUFFERS_NOEXCEPT;
};

struct ActorInfoBase FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActorInfoBaseT NativeTableType;
  typedef ActorInfoBaseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDX = 4,
    VT_NAME = 6,
    VT_POS = 8,
    VT_HPMP = 10
  };
  uint32_t idx() const {
    return GetField<uint32_t>(VT_IDX, 0);
  }
  bool mutate_idx(uint32_t _idx = 0) {
    return SetField<uint32_t>(VT_IDX, _idx, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  const fb::Position *pos() const {
    return GetPointer<const fb::Position *>(VT_POS);
  }
  fb::Position *mutable_pos() {
    return GetPointer<fb::Position *>(VT_POS);
  }
  const fb::HpMp *hpmp() const {
    return GetPointer<const fb::HpMp *>(VT_HPMP);
  }
  fb::HpMp *mutable_hpmp() {
    return GetPointer<fb::HpMp *>(VT_HPMP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_IDX, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_HPMP) &&
           verifier.VerifyTable(hpmp()) &&
           verifier.EndTable();
  }
  ActorInfoBaseT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ActorInfoBaseT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ActorInfoBase> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoBaseT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ActorInfoBaseBuilder {
  typedef ActorInfoBase Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idx(uint32_t idx) {
    fbb_.AddElement<uint32_t>(ActorInfoBase::VT_IDX, idx, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ActorInfoBase::VT_NAME, name);
  }
  void add_pos(::flatbuffers::Offset<fb::Position> pos) {
    fbb_.AddOffset(ActorInfoBase::VT_POS, pos);
  }
  void add_hpmp(::flatbuffers::Offset<fb::HpMp> hpmp) {
    fbb_.AddOffset(ActorInfoBase::VT_HPMP, hpmp);
  }
  explicit ActorInfoBaseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ActorInfoBase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ActorInfoBase>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ActorInfoBase> CreateActorInfoBase(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t idx = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<fb::Position> pos = 0,
    ::flatbuffers::Offset<fb::HpMp> hpmp = 0) {
  ActorInfoBaseBuilder builder_(_fbb);
  builder_.add_hpmp(hpmp);
  builder_.add_pos(pos);
  builder_.add_name(name);
  builder_.add_idx(idx);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ActorInfoBase> CreateActorInfoBaseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t idx = 0,
    const char *name = nullptr,
    ::flatbuffers::Offset<fb::Position> pos = 0,
    ::flatbuffers::Offset<fb::HpMp> hpmp = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return fb::CreateActorInfoBase(
      _fbb,
      idx,
      name__,
      pos,
      hpmp);
}

::flatbuffers::Offset<ActorInfoBase> CreateActorInfoBase(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoBaseT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ActorInfoDetailT : public ::flatbuffers::NativeTable {
  typedef ActorInfoDetail TableType;
  std::unique_ptr<fb::ActorInfoBaseT> base{};
  int32_t speed = 0;
  std::vector<std::unique_ptr<fb::BuffInfoT>> buff{};
  ActorInfoDetailT() = default;
  ActorInfoDetailT(const ActorInfoDetailT &o);
  ActorInfoDetailT(ActorInfoDetailT&&) FLATBUFFERS_NOEXCEPT = default;
  ActorInfoDetailT &operator=(ActorInfoDetailT o) FLATBUFFERS_NOEXCEPT;
};

struct ActorInfoDetail FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActorInfoDetailT NativeTableType;
  typedef ActorInfoDetailBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_SPEED = 6,
    VT_BUFF = 8
  };
  const fb::ActorInfoBase *base() const {
    return GetPointer<const fb::ActorInfoBase *>(VT_BASE);
  }
  fb::ActorInfoBase *mutable_base() {
    return GetPointer<fb::ActorInfoBase *>(VT_BASE);
  }
  int32_t speed() const {
    return GetField<int32_t>(VT_SPEED, 0);
  }
  bool mutate_speed(int32_t _speed = 0) {
    return SetField<int32_t>(VT_SPEED, _speed, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffInfo>> *buff() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffInfo>> *>(VT_BUFF);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffInfo>> *mutable_buff() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffInfo>> *>(VT_BUFF);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyField<int32_t>(verifier, VT_SPEED, 4) &&
           VerifyOffset(verifier, VT_BUFF) &&
           verifier.VerifyVector(buff()) &&
           verifier.VerifyVectorOfTables(buff()) &&
           verifier.EndTable();
  }
  ActorInfoDetailT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ActorInfoDetailT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ActorInfoDetail> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoDetailT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ActorInfoDetailBuilder {
  typedef ActorInfoDetail Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<fb::ActorInfoBase> base) {
    fbb_.AddOffset(ActorInfoDetail::VT_BASE, base);
  }
  void add_speed(int32_t speed) {
    fbb_.AddElement<int32_t>(ActorInfoDetail::VT_SPEED, speed, 0);
  }
  void add_buff(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffInfo>>> buff) {
    fbb_.AddOffset(ActorInfoDetail::VT_BUFF, buff);
  }
  explicit ActorInfoDetailBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ActorInfoDetail> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ActorInfoDetail>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ActorInfoDetail> CreateActorInfoDetail(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::ActorInfoBase> base = 0,
    int32_t speed = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffInfo>>> buff = 0) {
  ActorInfoDetailBuilder builder_(_fbb);
  builder_.add_buff(buff);
  builder_.add_speed(speed);
  builder_.add_base(base);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ActorInfoDetail> CreateActorInfoDetailDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::ActorInfoBase> base = 0,
    int32_t speed = 0,
    const std::vector<::flatbuffers::Offset<fb::BuffInfo>> *buff = nullptr) {
  auto buff__ = buff ? _fbb.CreateVector<::flatbuffers::Offset<fb::BuffInfo>>(*buff) : 0;
  return fb::CreateActorInfoDetail(
      _fbb,
      base,
      speed,
      buff__);
}

::flatbuffers::Offset<ActorInfoDetail> CreateActorInfoDetail(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoDetailT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ItemAbilityT : public ::flatbuffers::NativeTable {
  typedef ItemAbility TableType;
  fb::eAbilityTYpe type = fb::eAbilityTYpe_Attack1;
  int32_t value = 0;
};

struct ItemAbility FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemAbilityT NativeTableType;
  typedef ItemAbilityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_VALUE = 6
  };
  fb::eAbilityTYpe type() const {
    return static_cast<fb::eAbilityTYpe>(GetField<int32_t>(VT_TYPE, 0));
  }
  bool mutate_type(fb::eAbilityTYpe _type = static_cast<fb::eAbilityTYpe>(0)) {
    return SetField<int32_t>(VT_TYPE, static_cast<int32_t>(_type), 0);
  }
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool mutate_value(int32_t _value = 0) {
    return SetField<int32_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
  ItemAbilityT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemAbilityT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ItemAbility> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemAbilityT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemAbilityBuilder {
  typedef ItemAbility Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(fb::eAbilityTYpe type) {
    fbb_.AddElement<int32_t>(ItemAbility::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(ItemAbility::VT_VALUE, value, 0);
  }
  explicit ItemAbilityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemAbility> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemAbility>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemAbility> CreateItemAbility(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fb::eAbilityTYpe type = fb::eAbilityTYpe_Attack1,
    int32_t value = 0) {
  ItemAbilityBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_type(type);
  return builder_.Finish();
}

::flatbuffers::Offset<ItemAbility> CreateItemAbility(::flatbuffers::FlatBufferBuilder &_fbb, const ItemAbilityT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ItemBaseT : public ::flatbuffers::NativeTable {
  typedef ItemBase TableType;
  uint64_t uid = 0;
  uint32_t idx = 0;
  int32_t stack = 0;
};

struct ItemBase FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemBaseT NativeTableType;
  typedef ItemBaseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_IDX = 6,
    VT_STACK = 8
  };
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool mutate_uid(uint64_t _uid = 0) {
    return SetField<uint64_t>(VT_UID, _uid, 0);
  }
  uint32_t idx() const {
    return GetField<uint32_t>(VT_IDX, 0);
  }
  bool mutate_idx(uint32_t _idx = 0) {
    return SetField<uint32_t>(VT_IDX, _idx, 0);
  }
  int32_t stack() const {
    return GetField<int32_t>(VT_STACK, 0);
  }
  bool mutate_stack(int32_t _stack = 0) {
    return SetField<int32_t>(VT_STACK, _stack, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UID, 8) &&
           VerifyField<uint32_t>(verifier, VT_IDX, 4) &&
           VerifyField<int32_t>(verifier, VT_STACK, 4) &&
           verifier.EndTable();
  }
  ItemBaseT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemBaseT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ItemBase> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemBaseT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemBaseBuilder {
  typedef ItemBase Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(ItemBase::VT_UID, uid, 0);
  }
  void add_idx(uint32_t idx) {
    fbb_.AddElement<uint32_t>(ItemBase::VT_IDX, idx, 0);
  }
  void add_stack(int32_t stack) {
    fbb_.AddElement<int32_t>(ItemBase::VT_STACK, stack, 0);
  }
  explicit ItemBaseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemBase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemBase>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemBase> CreateItemBase(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uid = 0,
    uint32_t idx = 0,
    int32_t stack = 0) {
  ItemBaseBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_stack(stack);
  builder_.add_idx(idx);
  return builder_.Finish();
}

::flatbuffers::Offset<ItemBase> CreateItemBase(::flatbuffers::FlatBufferBuilder &_fbb, const ItemBaseT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ItemDetailT : public ::flatbuffers::NativeTable {
  typedef ItemDetail TableType;
  std::unique_ptr<fb::ItemBaseT> base{};
  uint32_t skin_index = 0;
  int32_t reinforce = 0;
  std::vector<std::unique_ptr<fb::ItemAbilityT>> reinforce_abilitys{};
  std::vector<std::unique_ptr<fb::ItemAbilityT>> enchant_abilitys{};
  ItemDetailT() = default;
  ItemDetailT(const ItemDetailT &o);
  ItemDetailT(ItemDetailT&&) FLATBUFFERS_NOEXCEPT = default;
  ItemDetailT &operator=(ItemDetailT o) FLATBUFFERS_NOEXCEPT;
};

struct ItemDetail FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemDetailT NativeTableType;
  typedef ItemDetailBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_SKIN_INDEX = 6,
    VT_REINFORCE = 8,
    VT_REINFORCE_ABILITYS = 10,
    VT_ENCHANT_ABILITYS = 12
  };
  const fb::ItemBase *base() const {
    return GetPointer<const fb::ItemBase *>(VT_BASE);
  }
  fb::ItemBase *mutable_base() {
    return GetPointer<fb::ItemBase *>(VT_BASE);
  }
  uint32_t skin_index() const {
    return GetField<uint32_t>(VT_SKIN_INDEX, 0);
  }
  bool mutate_skin_index(uint32_t _skin_index = 0) {
    return SetField<uint32_t>(VT_SKIN_INDEX, _skin_index, 0);
  }
  int32_t reinforce() const {
    return GetField<int32_t>(VT_REINFORCE, 0);
  }
  bool mutate_reinforce(int32_t _reinforce = 0) {
    return SetField<int32_t>(VT_REINFORCE, _reinforce, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *reinforce_abilitys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *>(VT_REINFORCE_ABILITYS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *mutable_reinforce_abilitys() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *>(VT_REINFORCE_ABILITYS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *enchant_abilitys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *>(VT_ENCHANT_ABILITYS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *mutable_enchant_abilitys() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>> *>(VT_ENCHANT_ABILITYS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyField<uint32_t>(verifier, VT_SKIN_INDEX, 4) &&
           VerifyField<int32_t>(verifier, VT_REINFORCE, 4) &&
           VerifyOffset(verifier, VT_REINFORCE_ABILITYS) &&
           verifier.VerifyVector(reinforce_abilitys()) &&
           verifier.VerifyVectorOfTables(reinforce_abilitys()) &&
           VerifyOffset(verifier, VT_ENCHANT_ABILITYS) &&
           verifier.VerifyVector(enchant_abilitys()) &&
           verifier.VerifyVectorOfTables(enchant_abilitys()) &&
           verifier.EndTable();
  }
  ItemDetailT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemDetailT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ItemDetail> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDetailT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemDetailBuilder {
  typedef ItemDetail Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base(::flatbuffers::Offset<fb::ItemBase> base) {
    fbb_.AddOffset(ItemDetail::VT_BASE, base);
  }
  void add_skin_index(uint32_t skin_index) {
    fbb_.AddElement<uint32_t>(ItemDetail::VT_SKIN_INDEX, skin_index, 0);
  }
  void add_reinforce(int32_t reinforce) {
    fbb_.AddElement<int32_t>(ItemDetail::VT_REINFORCE, reinforce, 0);
  }
  void add_reinforce_abilitys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>>> reinforce_abilitys) {
    fbb_.AddOffset(ItemDetail::VT_REINFORCE_ABILITYS, reinforce_abilitys);
  }
  void add_enchant_abilitys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>>> enchant_abilitys) {
    fbb_.AddOffset(ItemDetail::VT_ENCHANT_ABILITYS, enchant_abilitys);
  }
  explicit ItemDetailBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemDetail> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemDetail>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemDetail> CreateItemDetail(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::ItemBase> base = 0,
    uint32_t skin_index = 0,
    int32_t reinforce = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>>> reinforce_abilitys = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemAbility>>> enchant_abilitys = 0) {
  ItemDetailBuilder builder_(_fbb);
  builder_.add_enchant_abilitys(enchant_abilitys);
  builder_.add_reinforce_abilitys(reinforce_abilitys);
  builder_.add_reinforce(reinforce);
  builder_.add_skin_index(skin_index);
  builder_.add_base(base);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemDetail> CreateItemDetailDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::ItemBase> base = 0,
    uint32_t skin_index = 0,
    int32_t reinforce = 0,
    const std::vector<::flatbuffers::Offset<fb::ItemAbility>> *reinforce_abilitys = nullptr,
    const std::vector<::flatbuffers::Offset<fb::ItemAbility>> *enchant_abilitys = nullptr) {
  auto reinforce_abilitys__ = reinforce_abilitys ? _fbb.CreateVector<::flatbuffers::Offset<fb::ItemAbility>>(*reinforce_abilitys) : 0;
  auto enchant_abilitys__ = enchant_abilitys ? _fbb.CreateVector<::flatbuffers::Offset<fb::ItemAbility>>(*enchant_abilitys) : 0;
  return fb::CreateItemDetail(
      _fbb,
      base,
      skin_index,
      reinforce,
      reinforce_abilitys__,
      enchant_abilitys__);
}

::flatbuffers::Offset<ItemDetail> CreateItemDetail(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDetailT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PartyCreateOptionT : public ::flatbuffers::NativeTable {
  typedef PartyCreateOption TableType;
  std::string notice{};
};

struct PartyCreateOption FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PartyCreateOptionT NativeTableType;
  typedef PartyCreateOptionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NOTICE = 4
  };
  const ::flatbuffers::String *notice() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTICE);
  }
  ::flatbuffers::String *mutable_notice() {
    return GetPointer<::flatbuffers::String *>(VT_NOTICE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NOTICE) &&
           verifier.VerifyString(notice()) &&
           verifier.EndTable();
  }
  PartyCreateOptionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PartyCreateOptionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<PartyCreateOption> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PartyCreateOptionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PartyCreateOptionBuilder {
  typedef PartyCreateOption Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_notice(::flatbuffers::Offset<::flatbuffers::String> notice) {
    fbb_.AddOffset(PartyCreateOption::VT_NOTICE, notice);
  }
  explicit PartyCreateOptionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PartyCreateOption> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PartyCreateOption>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PartyCreateOption> CreatePartyCreateOption(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> notice = 0) {
  PartyCreateOptionBuilder builder_(_fbb);
  builder_.add_notice(notice);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PartyCreateOption> CreatePartyCreateOptionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *notice = nullptr) {
  auto notice__ = notice ? _fbb.CreateString(notice) : 0;
  return fb::CreatePartyCreateOption(
      _fbb,
      notice__);
}

::flatbuffers::Offset<PartyCreateOption> CreatePartyCreateOption(::flatbuffers::FlatBufferBuilder &_fbb, const PartyCreateOptionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct GuildCreateOptionT : public ::flatbuffers::NativeTable {
  typedef GuildCreateOption TableType;
  std::string name{};
  uint64_t mark = 0;
  std::string notice{};
};

struct GuildCreateOption FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GuildCreateOptionT NativeTableType;
  typedef GuildCreateOptionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MARK = 6,
    VT_NOTICE = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  uint64_t mark() const {
    return GetField<uint64_t>(VT_MARK, 0);
  }
  bool mutate_mark(uint64_t _mark = 0) {
    return SetField<uint64_t>(VT_MARK, _mark, 0);
  }
  const ::flatbuffers::String *notice() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTICE);
  }
  ::flatbuffers::String *mutable_notice() {
    return GetPointer<::flatbuffers::String *>(VT_NOTICE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_MARK, 8) &&
           VerifyOffset(verifier, VT_NOTICE) &&
           verifier.VerifyString(notice()) &&
           verifier.EndTable();
  }
  GuildCreateOptionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GuildCreateOptionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<GuildCreateOption> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GuildCreateOptionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GuildCreateOptionBuilder {
  typedef GuildCreateOption Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(GuildCreateOption::VT_NAME, name);
  }
  void add_mark(uint64_t mark) {
    fbb_.AddElement<uint64_t>(GuildCreateOption::VT_MARK, mark, 0);
  }
  void add_notice(::flatbuffers::Offset<::flatbuffers::String> notice) {
    fbb_.AddOffset(GuildCreateOption::VT_NOTICE, notice);
  }
  explicit GuildCreateOptionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GuildCreateOption> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GuildCreateOption>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GuildCreateOption> CreateGuildCreateOption(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint64_t mark = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notice = 0) {
  GuildCreateOptionBuilder builder_(_fbb);
  builder_.add_mark(mark);
  builder_.add_notice(notice);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GuildCreateOption> CreateGuildCreateOptionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t mark = 0,
    const char *notice = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto notice__ = notice ? _fbb.CreateString(notice) : 0;
  return fb::CreateGuildCreateOption(
      _fbb,
      name__,
      mark,
      notice__);
}

::flatbuffers::Offset<GuildCreateOption> CreateGuildCreateOption(::flatbuffers::FlatBufferBuilder &_fbb, const GuildCreateOptionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ServerInfoT *ServerInfo::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ServerInfoT>(new ServerInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ServerInfo::UnPackTo(ServerInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = server_id(); _o->server_id = _e; }
  { auto _e = ip(); if (_e) _o->ip = _e->str(); }
  { auto _e = port(); if (_e) { _o->port.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->port[_i] = _e->Get(_i); } } else { _o->port.resize(0); } }
}

inline ::flatbuffers::Offset<ServerInfo> ServerInfo::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ServerInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateServerInfo(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ServerInfo> CreateServerInfo(::flatbuffers::FlatBufferBuilder &_fbb, const ServerInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ServerInfoT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _server_id = _o->server_id;
  auto _ip = _o->ip.empty() ? 0 : _fbb.CreateString(_o->ip);
  auto _port = _o->port.size() ? _fbb.CreateVector(_o->port) : 0;
  return fb::CreateServerInfo(
      _fbb,
      _server_id,
      _ip,
      _port);
}

inline Vector3T *Vector3::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Vector3T>(new Vector3T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Vector3::UnPackTo(Vector3T *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); _o->y = _e; }
  { auto _e = z(); _o->z = _e; }
}

inline ::flatbuffers::Offset<Vector3> Vector3::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Vector3T* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVector3(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Vector3> CreateVector3(::flatbuffers::FlatBufferBuilder &_fbb, const Vector3T *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Vector3T* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y;
  auto _z = _o->z;
  return fb::CreateVector3(
      _fbb,
      _x,
      _y,
      _z);
}

inline PositionT *Position::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PositionT>(new PositionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Position::UnPackTo(PositionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); _o->y = _e; }
  { auto _e = z(); _o->z = _e; }
  { auto _e = angle(); _o->angle = _e; }
}

inline ::flatbuffers::Offset<Position> Position::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PositionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePosition(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Position> CreatePosition(::flatbuffers::FlatBufferBuilder &_fbb, const PositionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PositionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y;
  auto _z = _o->z;
  auto _angle = _o->angle;
  return fb::CreatePosition(
      _fbb,
      _x,
      _y,
      _z,
      _angle);
}

inline HpMpT *HpMp::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HpMpT>(new HpMpT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HpMp::UnPackTo(HpMpT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = cur_hp(); _o->cur_hp = _e; }
  { auto _e = max_hp(); _o->max_hp = _e; }
  { auto _e = cur_mp(); _o->cur_mp = _e; }
  { auto _e = max_mp(); _o->max_mp = _e; }
}

inline ::flatbuffers::Offset<HpMp> HpMp::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HpMpT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHpMp(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<HpMp> CreateHpMp(::flatbuffers::FlatBufferBuilder &_fbb, const HpMpT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const HpMpT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _cur_hp = _o->cur_hp;
  auto _max_hp = _o->max_hp;
  auto _cur_mp = _o->cur_mp;
  auto _max_mp = _o->max_mp;
  return fb::CreateHpMp(
      _fbb,
      _cur_hp,
      _max_hp,
      _cur_mp,
      _max_mp);
}

inline BuffInfoT *BuffInfo::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BuffInfoT>(new BuffInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void BuffInfo::UnPackTo(BuffInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = idx(); _o->idx = _e; }
  { auto _e = expire(); _o->expire = _e; }
}

inline ::flatbuffers::Offset<BuffInfo> BuffInfo::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BuffInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBuffInfo(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<BuffInfo> CreateBuffInfo(::flatbuffers::FlatBufferBuilder &_fbb, const BuffInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const BuffInfoT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _idx = _o->idx;
  auto _expire = _o->expire;
  return fb::CreateBuffInfo(
      _fbb,
      _idx,
      _expire);
}

inline ActorInfoBaseT::ActorInfoBaseT(const ActorInfoBaseT &o)
      : idx(o.idx),
        name(o.name),
        pos((o.pos) ? new fb::PositionT(*o.pos) : nullptr),
        hpmp((o.hpmp) ? new fb::HpMpT(*o.hpmp) : nullptr) {
}

inline ActorInfoBaseT &ActorInfoBaseT::operator=(ActorInfoBaseT o) FLATBUFFERS_NOEXCEPT {
  std::swap(idx, o.idx);
  std::swap(name, o.name);
  std::swap(pos, o.pos);
  std::swap(hpmp, o.hpmp);
  return *this;
}

inline ActorInfoBaseT *ActorInfoBase::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ActorInfoBaseT>(new ActorInfoBaseT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ActorInfoBase::UnPackTo(ActorInfoBaseT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = idx(); _o->idx = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = pos(); if (_e) { if(_o->pos) { _e->UnPackTo(_o->pos.get(), _resolver); } else { _o->pos = std::unique_ptr<fb::PositionT>(_e->UnPack(_resolver)); } } else if (_o->pos) { _o->pos.reset(); } }
  { auto _e = hpmp(); if (_e) { if(_o->hpmp) { _e->UnPackTo(_o->hpmp.get(), _resolver); } else { _o->hpmp = std::unique_ptr<fb::HpMpT>(_e->UnPack(_resolver)); } } else if (_o->hpmp) { _o->hpmp.reset(); } }
}

inline ::flatbuffers::Offset<ActorInfoBase> ActorInfoBase::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoBaseT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateActorInfoBase(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ActorInfoBase> CreateActorInfoBase(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoBaseT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ActorInfoBaseT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _idx = _o->idx;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _pos = _o->pos ? CreatePosition(_fbb, _o->pos.get(), _rehasher) : 0;
  auto _hpmp = _o->hpmp ? CreateHpMp(_fbb, _o->hpmp.get(), _rehasher) : 0;
  return fb::CreateActorInfoBase(
      _fbb,
      _idx,
      _name,
      _pos,
      _hpmp);
}

inline ActorInfoDetailT::ActorInfoDetailT(const ActorInfoDetailT &o)
      : base((o.base) ? new fb::ActorInfoBaseT(*o.base) : nullptr),
        speed(o.speed) {
  buff.reserve(o.buff.size());
  for (const auto &buff_ : o.buff) { buff.emplace_back((buff_) ? new fb::BuffInfoT(*buff_) : nullptr); }
}

inline ActorInfoDetailT &ActorInfoDetailT::operator=(ActorInfoDetailT o) FLATBUFFERS_NOEXCEPT {
  std::swap(base, o.base);
  std::swap(speed, o.speed);
  std::swap(buff, o.buff);
  return *this;
}

inline ActorInfoDetailT *ActorInfoDetail::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ActorInfoDetailT>(new ActorInfoDetailT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ActorInfoDetail::UnPackTo(ActorInfoDetailT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = base(); if (_e) { if(_o->base) { _e->UnPackTo(_o->base.get(), _resolver); } else { _o->base = std::unique_ptr<fb::ActorInfoBaseT>(_e->UnPack(_resolver)); } } else if (_o->base) { _o->base.reset(); } }
  { auto _e = speed(); _o->speed = _e; }
  { auto _e = buff(); if (_e) { _o->buff.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->buff[_i]) { _e->Get(_i)->UnPackTo(_o->buff[_i].get(), _resolver); } else { _o->buff[_i] = std::unique_ptr<fb::BuffInfoT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->buff.resize(0); } }
}

inline ::flatbuffers::Offset<ActorInfoDetail> ActorInfoDetail::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoDetailT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateActorInfoDetail(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ActorInfoDetail> CreateActorInfoDetail(::flatbuffers::FlatBufferBuilder &_fbb, const ActorInfoDetailT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ActorInfoDetailT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _base = _o->base ? CreateActorInfoBase(_fbb, _o->base.get(), _rehasher) : 0;
  auto _speed = _o->speed;
  auto _buff = _o->buff.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::BuffInfo>> (_o->buff.size(), [](size_t i, _VectorArgs *__va) { return CreateBuffInfo(*__va->__fbb, __va->__o->buff[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateActorInfoDetail(
      _fbb,
      _base,
      _speed,
      _buff);
}

inline ItemAbilityT *ItemAbility::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemAbilityT>(new ItemAbilityT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemAbility::UnPackTo(ItemAbilityT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = type(); _o->type = _e; }
  { auto _e = value(); _o->value = _e; }
}

inline ::flatbuffers::Offset<ItemAbility> ItemAbility::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemAbilityT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemAbility(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ItemAbility> CreateItemAbility(::flatbuffers::FlatBufferBuilder &_fbb, const ItemAbilityT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ItemAbilityT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _type = _o->type;
  auto _value = _o->value;
  return fb::CreateItemAbility(
      _fbb,
      _type,
      _value);
}

inline ItemBaseT *ItemBase::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemBaseT>(new ItemBaseT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemBase::UnPackTo(ItemBaseT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = uid(); _o->uid = _e; }
  { auto _e = idx(); _o->idx = _e; }
  { auto _e = stack(); _o->stack = _e; }
}

inline ::flatbuffers::Offset<ItemBase> ItemBase::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemBaseT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemBase(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ItemBase> CreateItemBase(::flatbuffers::FlatBufferBuilder &_fbb, const ItemBaseT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ItemBaseT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _uid = _o->uid;
  auto _idx = _o->idx;
  auto _stack = _o->stack;
  return fb::CreateItemBase(
      _fbb,
      _uid,
      _idx,
      _stack);
}

inline ItemDetailT::ItemDetailT(const ItemDetailT &o)
      : base((o.base) ? new fb::ItemBaseT(*o.base) : nullptr),
        skin_index(o.skin_index),
        reinforce(o.reinforce) {
  reinforce_abilitys.reserve(o.reinforce_abilitys.size());
  for (const auto &reinforce_abilitys_ : o.reinforce_abilitys) { reinforce_abilitys.emplace_back((reinforce_abilitys_) ? new fb::ItemAbilityT(*reinforce_abilitys_) : nullptr); }
  enchant_abilitys.reserve(o.enchant_abilitys.size());
  for (const auto &enchant_abilitys_ : o.enchant_abilitys) { enchant_abilitys.emplace_back((enchant_abilitys_) ? new fb::ItemAbilityT(*enchant_abilitys_) : nullptr); }
}

inline ItemDetailT &ItemDetailT::operator=(ItemDetailT o) FLATBUFFERS_NOEXCEPT {
  std::swap(base, o.base);
  std::swap(skin_index, o.skin_index);
  std::swap(reinforce, o.reinforce);
  std::swap(reinforce_abilitys, o.reinforce_abilitys);
  std::swap(enchant_abilitys, o.enchant_abilitys);
  return *this;
}

inline ItemDetailT *ItemDetail::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemDetailT>(new ItemDetailT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemDetail::UnPackTo(ItemDetailT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = base(); if (_e) { if(_o->base) { _e->UnPackTo(_o->base.get(), _resolver); } else { _o->base = std::unique_ptr<fb::ItemBaseT>(_e->UnPack(_resolver)); } } else if (_o->base) { _o->base.reset(); } }
  { auto _e = skin_index(); _o->skin_index = _e; }
  { auto _e = reinforce(); _o->reinforce = _e; }
  { auto _e = reinforce_abilitys(); if (_e) { _o->reinforce_abilitys.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->reinforce_abilitys[_i]) { _e->Get(_i)->UnPackTo(_o->reinforce_abilitys[_i].get(), _resolver); } else { _o->reinforce_abilitys[_i] = std::unique_ptr<fb::ItemAbilityT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->reinforce_abilitys.resize(0); } }
  { auto _e = enchant_abilitys(); if (_e) { _o->enchant_abilitys.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->enchant_abilitys[_i]) { _e->Get(_i)->UnPackTo(_o->enchant_abilitys[_i].get(), _resolver); } else { _o->enchant_abilitys[_i] = std::unique_ptr<fb::ItemAbilityT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->enchant_abilitys.resize(0); } }
}

inline ::flatbuffers::Offset<ItemDetail> ItemDetail::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDetailT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemDetail(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ItemDetail> CreateItemDetail(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDetailT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ItemDetailT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _base = _o->base ? CreateItemBase(_fbb, _o->base.get(), _rehasher) : 0;
  auto _skin_index = _o->skin_index;
  auto _reinforce = _o->reinforce;
  auto _reinforce_abilitys = _o->reinforce_abilitys.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::ItemAbility>> (_o->reinforce_abilitys.size(), [](size_t i, _VectorArgs *__va) { return CreateItemAbility(*__va->__fbb, __va->__o->reinforce_abilitys[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _enchant_abilitys = _o->enchant_abilitys.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::ItemAbility>> (_o->enchant_abilitys.size(), [](size_t i, _VectorArgs *__va) { return CreateItemAbility(*__va->__fbb, __va->__o->enchant_abilitys[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateItemDetail(
      _fbb,
      _base,
      _skin_index,
      _reinforce,
      _reinforce_abilitys,
      _enchant_abilitys);
}

inline PartyCreateOptionT *PartyCreateOption::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PartyCreateOptionT>(new PartyCreateOptionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PartyCreateOption::UnPackTo(PartyCreateOptionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = notice(); if (_e) _o->notice = _e->str(); }
}

inline ::flatbuffers::Offset<PartyCreateOption> PartyCreateOption::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PartyCreateOptionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePartyCreateOption(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<PartyCreateOption> CreatePartyCreateOption(::flatbuffers::FlatBufferBuilder &_fbb, const PartyCreateOptionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PartyCreateOptionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _notice = _o->notice.empty() ? 0 : _fbb.CreateString(_o->notice);
  return fb::CreatePartyCreateOption(
      _fbb,
      _notice);
}

inline GuildCreateOptionT *GuildCreateOption::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GuildCreateOptionT>(new GuildCreateOptionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GuildCreateOption::UnPackTo(GuildCreateOptionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = mark(); _o->mark = _e; }
  { auto _e = notice(); if (_e) _o->notice = _e->str(); }
}

inline ::flatbuffers::Offset<GuildCreateOption> GuildCreateOption::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GuildCreateOptionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGuildCreateOption(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<GuildCreateOption> CreateGuildCreateOption(::flatbuffers::FlatBufferBuilder &_fbb, const GuildCreateOptionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const GuildCreateOptionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _mark = _o->mark;
  auto _notice = _o->notice.empty() ? 0 : _fbb.CreateString(_o->notice);
  return fb::CreateGuildCreateOption(
      _fbb,
      _name,
      _mark,
      _notice);
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_COMMONTABLE_FB_H_
