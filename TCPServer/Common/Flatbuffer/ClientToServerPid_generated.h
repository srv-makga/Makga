// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENTTOSERVERPID_FB_SERVER_H_
#define FLATBUFFERS_GENERATED_CLIENTTOSERVERPID_FB_SERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace server {

enum SendPid : uint32_t {
  SendPid_None = 0,
  SendPid_LoginAccount = 1,
  SendPid_LoginAuth = 2,
  SendPid_LoginSecurity = 3,
  ////////// character //////////
  SendPid_CharacterCreate = 4,
  SendPid_CharacterDelete = 5,
  SendPid_CharacterSelect = 6,
  SendPid_CharacterLogout = 7,
  SendPid_CharacterMove = 8,
  SendPid_CharacterAngle = 9,
  SendPid_CharacterResurrection = 10,
  ////////// actor //////////
  SendPid_ActorInteractionStart = 11,
  SendPid_ActorInteractionEnd = 12,
  SendPid_ActorInteractionCancel = 13,
  ////////// item //////////
  SendPid_item_destroy = 14,
  SendPid_item_use = 15,
  SendPid_item_make = 16,
  SendPid_item_reinforce = 17,
  SendPid_item_enchant = 18,
  SendPid_item_disassemble = 19,
  SendPid_item_repair = 20,
  SendPid_item_skin_change = 21,
  ////////// skill //////////
  SendPid_skill_spell_start = 22,
  SendPid_skill_spell_end = 23,
  SendPid_skill_learn = 24,
  SendPid_skill_casting = 25,
  SendPid_skill_cancel = 26,
  ////////// shop //////////
  SendPid_shop_buy = 27,
  SendPid_shop_sell = 28,
  ////////// quest //////////
  SendPid_quest_accept = 29,
  SendPid_quest_cancel = 30,
  SendPid_quest_reward = 31,
  ////////// premium //////////
  SendPid_premium_buy = 32,
  SendPid_premium_refund = 33,
  SendPid_premium_confirm = 34,
  ////////// party //////////
  SendPid_party_create = 35,
  SendPid_party_join = 36,
  SendPid_party_leave = 37,
  SendPid_party_invite = 38,
  SendPid_party_invite_answer = 39,
  SendPid_party_deport = 40,
  SendPid_party_update = 41,
  ////////// guild //////////
  SendPid_guild_create = 42,
  SendPid_guild_leave = 43,
  SendPid_guild_deport = 44,
  SendPid_guild_option_change = 45,
  SendPid_guild_member_invite = 46,
  SendPid_guild_member_invite_answer = 47,
  SendPid_guild_member_grade_change = 48,
  SendPid_guild_warehouse_open = 49,
  SendPid_guild_warehouse_close = 50,
  ////////// friend //////////
  SendPid_friend_add = 51,
  SendPid_friend_accept = 52,
  SendPid_friend_remove = 53,
  ////////// instance //////////
  SendPid_instance_enter = 54,
  SendPid_instance_cutscean_skip = 55,
  SendPid_MIN = SendPid_None,
  SendPid_MAX = SendPid_instance_cutscean_skip
};

inline const SendPid (&EnumValuesSendPid())[56] {
  static const SendPid values[] = {
    SendPid_None,
    SendPid_LoginAccount,
    SendPid_LoginAuth,
    SendPid_LoginSecurity,
    SendPid_CharacterCreate,
    SendPid_CharacterDelete,
    SendPid_CharacterSelect,
    SendPid_CharacterLogout,
    SendPid_CharacterMove,
    SendPid_CharacterAngle,
    SendPid_CharacterResurrection,
    SendPid_ActorInteractionStart,
    SendPid_ActorInteractionEnd,
    SendPid_ActorInteractionCancel,
    SendPid_item_destroy,
    SendPid_item_use,
    SendPid_item_make,
    SendPid_item_reinforce,
    SendPid_item_enchant,
    SendPid_item_disassemble,
    SendPid_item_repair,
    SendPid_item_skin_change,
    SendPid_skill_spell_start,
    SendPid_skill_spell_end,
    SendPid_skill_learn,
    SendPid_skill_casting,
    SendPid_skill_cancel,
    SendPid_shop_buy,
    SendPid_shop_sell,
    SendPid_quest_accept,
    SendPid_quest_cancel,
    SendPid_quest_reward,
    SendPid_premium_buy,
    SendPid_premium_refund,
    SendPid_premium_confirm,
    SendPid_party_create,
    SendPid_party_join,
    SendPid_party_leave,
    SendPid_party_invite,
    SendPid_party_invite_answer,
    SendPid_party_deport,
    SendPid_party_update,
    SendPid_guild_create,
    SendPid_guild_leave,
    SendPid_guild_deport,
    SendPid_guild_option_change,
    SendPid_guild_member_invite,
    SendPid_guild_member_invite_answer,
    SendPid_guild_member_grade_change,
    SendPid_guild_warehouse_open,
    SendPid_guild_warehouse_close,
    SendPid_friend_add,
    SendPid_friend_accept,
    SendPid_friend_remove,
    SendPid_instance_enter,
    SendPid_instance_cutscean_skip
  };
  return values;
}

inline const char * const *EnumNamesSendPid() {
  static const char * const names[57] = {
    "None",
    "LoginAccount",
    "LoginAuth",
    "LoginSecurity",
    "CharacterCreate",
    "CharacterDelete",
    "CharacterSelect",
    "CharacterLogout",
    "CharacterMove",
    "CharacterAngle",
    "CharacterResurrection",
    "ActorInteractionStart",
    "ActorInteractionEnd",
    "ActorInteractionCancel",
    "item_destroy",
    "item_use",
    "item_make",
    "item_reinforce",
    "item_enchant",
    "item_disassemble",
    "item_repair",
    "item_skin_change",
    "skill_spell_start",
    "skill_spell_end",
    "skill_learn",
    "skill_casting",
    "skill_cancel",
    "shop_buy",
    "shop_sell",
    "quest_accept",
    "quest_cancel",
    "quest_reward",
    "premium_buy",
    "premium_refund",
    "premium_confirm",
    "party_create",
    "party_join",
    "party_leave",
    "party_invite",
    "party_invite_answer",
    "party_deport",
    "party_update",
    "guild_create",
    "guild_leave",
    "guild_deport",
    "guild_option_change",
    "guild_member_invite",
    "guild_member_invite_answer",
    "guild_member_grade_change",
    "guild_warehouse_open",
    "guild_warehouse_close",
    "friend_add",
    "friend_accept",
    "friend_remove",
    "instance_enter",
    "instance_cutscean_skip",
    nullptr
  };
  return names;
}

inline const char *EnumNameSendPid(SendPid e) {
  if (::flatbuffers::IsOutRange(e, SendPid_None, SendPid_instance_cutscean_skip)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSendPid()[index];
}

/// [ENUM] (C<-GS) Recv Packet id
enum RecvPid : uint32_t {
  RecvPid_None = 0,
  RecvPid_Connect = 1,
  RecvPid_Login = 2,
  RecvPid_MIN = RecvPid_None,
  RecvPid_MAX = RecvPid_Login
};

inline const RecvPid (&EnumValuesRecvPid())[3] {
  static const RecvPid values[] = {
    RecvPid_None,
    RecvPid_Connect,
    RecvPid_Login
  };
  return values;
}

inline const char * const *EnumNamesRecvPid() {
  static const char * const names[4] = {
    "None",
    "Connect",
    "Login",
    nullptr
  };
  return names;
}

inline const char *EnumNameRecvPid(RecvPid e) {
  if (::flatbuffers::IsOutRange(e, RecvPid_None, RecvPid_Login)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRecvPid()[index];
}

}  // namespace server
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_CLIENTTOSERVERPID_FB_SERVER_H_
